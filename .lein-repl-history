(use 'one-function-to-rule-them-all)
(concat-elements [])            ;=> ()
(concat-elements [[1 2]])       ;=> (1 2)
(concat-elements [[1 2] [3 4]]) ;=> (1 2 3 4)
(reduce * []_
(reduce * [])
(reduce + [])
(*)
(* 5)
(use 'one-function-to-rule-them-all :reload)
(str-cat ["I" "am" "Legend"])  ;=> "I am Legend"
(str-cat ["I" "am" "Legend"])
(str-cat [])
(str-cat ["A" "B" "C"])
(use 'one-function-to-rule-them-all :reload)
(str-cat ["A" "B" "C"])
(str-cat ["I" "am" "Legend"])  ;=> "I am Legend"
(conj 0 1)
(conj [0] 1)
(cons [0] 1)
(cons 0 [1])
(conj '(0) 1)
(conj [0] 1 2)
(conj 0 1 2)
(use 'one-function-to-rule-them-all :reload)
(my-interpose 0 [1 2 3])               ;=> (1 0 2 0 3)
(use 'one-function-to-rule-them-all :reload)
(my-interpose 0 [1 2 3])               ;=> (1 0 2 0 3)
(use 'one-function-to-rule-them-all :reload)
(my-interpose 0 [1 2 3])               ;=> (1 0 2 0 3)
(use 'one-function-to-rule-them-all :reload)
(my-interpose 0 [1 2 3])               ;=> (1 0 2 0 3)
(use 'one-function-to-rule-them-all :reload)
(my-interpose 0 [1 2 3])               ;=> (1 0 2 0 3)
(use 'one-function-to-rule-them-all :reload)
(my-count [])
(my-count [1])
(my-count [2 3 4])
(use 'one-function-to-rule-them-all :reload)
(my-count [2 3 4])
(my-count [1])
(my-count [])
(use 'one-function-to-rule-them-all :reload)
(my-reverse [])      ;=> ()
(my-reverse [1 2])   ;=> (2 1)
(my-reverse [1 2 3]) ;=> (3 2 1)
(> nil 1)
(use 'one-function-to-rule-them-all :reload)
(min-max-element [1])          ;=> [1 1]
(min-max-element [1 2 3 4])    ;=> [1 4]
(use 'one-function-to-rule-them-all :reload)
(min-max-element [1])          ;=> [1 1]
(min-max-element [1 2 3 4])    ;=> [1 4]
(min-max-element [2 7 3 15 4]) ;=> [2 15]
(min-max-element [2 7 3 15 4 -1]) ;=> [2 15]
(reverse [1 2 3])
(conj '(1) '(3))
(concat '(1) '(3))
(+ "123" 2)
(use 'one-function-to-rule-them-all :reload)
(insert [] 2)      ;=> (2)
(insert [1 3 4] 2) ;=> (1 2 3 4)
(insert [1] 2)     ;=> (1 2)
(use 'one-function-to-rule-them-all :reload)
(insert [] 2)      ;=> (2)
(insert [1 3 4] 2) ;=> (1 2 3 4)
(insert [1] 2)     ;=> (1 2)
(use 'one-function-to-rule-them-all :reload)
(insertion-sort [2 5 3 1]) ;=> (1 2 3 5)
(insertion-sort [1 2])     ;=> (1 2)
(use 'one-function-to-rule-them-all :reload)
(parity [:a :b :c])    ;=> #{:a :b :c}
(parity [:a :a :b :b]) ;=> #{}
(parity [1 2 3 1])     ;=> #{2 3}
(use 'one-function-to-rule-them-all :reload)
(minus 2)   ;=> -2
(minus 4 3) ;=> 1
(use 'one-function-to-rule-them-all :reload)
(count-params)            ;=> 0
(count-params :a)         ;=> 1
(count-params :a 1 :b :c) ;=> 4
(use 'one-function-to-rule-them-all :reload)
(my-*)           ;=> 1
(my-* 4 3)       ;=> 12
(my-* 1 2 3 4 5) ;=> 120
(and true false true)
(apply [pos? even?] 2)
(and [true false true])
(apply and [true false true])
(and apply [true false true])
(reduce and [true false true])
(reduce #(and) [true false true])
(reduce #(and %1 %2) [true false true])
(use 'one-function-to-rule-them-all :reload)
(filter (pred-and) [1 0 -2])                    ;=> (1 0 -2)
(filter (pred-and pos? odd?) [1 2 -4 0 6 7 -3]) ;=> (1 7)
(filter (pred-and number? integer? pos? even?)
        [1 0 -2 :a 7 "a" 2])                    ;=> (0 2)
(use 'one-function-to-rule-them-all :reload)
(filter (pred-and) [1 0 -2])                    ;=> (1 0 -2)
(filter (pred-and pos? odd?) [1 2 -4 0 6 7 -3]) ;=> (1 7)
(filter (pred-and number? integer? pos? even?)
        [1 0 -2 :a 7 "a" 2])                    ;=> (0 2)
(use 'one-function-to-rule-them-all :reload)
(filter (pred-and) [1 0 -2])                    ;=> (1 0 -2)
(use 'one-function-to-rule-them-all :reload)
(filter (pred-and) [1 0 -2])                    ;=> (1 0 -2)
(use 'one-function-to-rule-them-all :reload)
(filter (pred-and) [1 0 -2])                    ;=> (1 0 -2)
(filter (pred-and pos?) [1 0 -2])                    ;=> (1 0 -2)
(use 'one-function-to-rule-them-all :reload)
(filter (pred-and) [1 0 -2])                    ;=> (1 0 -2)
(use 'one-function-to-rule-them-all :reload)
(filter (pred-and) [1 0 -2])                    ;=> (1 0 -2)
(reduce = true [true true false])
(use 'one-function-to-rule-them-all :reload)
(filter (pred-and) [1 0 -2])                    ;=> (1 0 -2)
(filter (pred-and pos? odd?) [1 2 -4 0 6 7 -3]) ;=> (1 7)
(filter (pred-and number? integer? pos? even?)
        [1 0 -2 :a 7 "a" 2])                    ;=> (0 2)
(use 'one-function-to-rule-them-all :reload)
(filter (pred-and number? integer? pos? even?)
        [1 0 -2 :a 7 "a" 2])                    ;=> (0 2)
(filter (pred-and number? integer? pos? even?)
(use 'one-function-to-rule-them-all :reload)
(filter (pred-and number? integer? pos? even?)
        [1 0 -2 :a 7 "a" 2])                    ;=> (0 2)
(true 1)
(macroexpand ('and (even? 2) (odd? 1))
(macroexpand '(and (even? 2) (odd? 1))
(macroexpand '(and (even? 2) (odd? 1)))
(let*)
(let* [a 1] a)
(doc let*)
(doc let)
(use 'one-function-to-rule-them-all :reload)
(filter (pred-and number? positive? even?) [-1 1 2 3 4])
(filter (pred-and number? pos? even?) [-1 1 2 3 4])
(use 'one-function-to-rule-them-all :reload)
(filter (pred-and number? pos? even?) [-1 1 2 3 4])
(use 'one-function-to-rule-them-all :reload)
(filter (pred-and number? pos? even?) [-1 1 2 3 4])
(map +)
(doc map)
(conj [] 1)
(conj [2] 1)
(conj '(2) 1)
(conj '(1) 2)
(cons '(1) 2)
(cons 2 '(1))
(defn single-double-triple [x]
  [(* x 1) (* x 2) (* x 3)])
(map single-double-triple (range 10))
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])                  ;=> (2 3 4 5)
(apply rest [1 2 3] [1 2 3])
(apply rest [[1 2 3] [1 2 3]])
(map rest [[1 2 3] [3 4 5]])
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])                  ;=> (2 3 4 5)
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])                  ;=> (2 3 4 5)
(reduce identity [[1 2 3] [1 2 3]])
(reduce #(map identity) [[1 2 3] [1 2 3]])
(reduce + [[1 2 3] [1 2 3]])
(reduce + [1 2 3] [1 2 3])
(reduce + 1 [1 2 3])
(reduce + [0 0 0] [[1 2 3] [1 2 3]])
(reduce + 0 [[1 2 3] [1 2 3]])
(reduce + 0 [1 2 3] [1 2 3])
(use 'one-function-to-rule-them-all :reload)
(my-map + [1 1 1] [1 1 1])
(use 'one-function-to-rule-them-all :reload)
(my-map + [1 1 1] [1 1 1])
(use 'one-function-to-rule-them-all :reload)
(my-map + [1 1 1] [1 1 1])
(use 'one-function-to-rule-them-all :reload)
(my-map + [1 1 1] [1 1 1])
(def splat
[& args]
*args)
(defn splat
[& args]
*args)
(use 'one-function-to-rule-them-all :reload)
(my-map + [1 1 1] [1 1 1] [1 1 1])
(concat (list [1 2 3] [1 2 3]) [[3 4 5] [3 4 5]])
(use 'one-function-to-rule-them-all :reload)
(my-map + [1 1 1] [1 1 1] [1 1 1])
(use 'one-function-to-rule-them-all :reload)
(my-map + [1 1 1] [1 1 1] [1 1 1])
(my-map vector [1 2 3] [1 2 3] [1 2 3]) ;=> ((1 1 1) (2 2 2) (3 3 3))
(use 'one-function-to-rule-them-all :reload)
(my-map vector [1 2 3] [1 2 3] [1 2 3]) ;=> ((1 1 1) (2 2 2) (3 3 3))
(map vector [1 2 3] [2 3 4] [3 4 5])
(map vector [1 2 3 4] [2 3 4 5] [3 4 5 6])
(use 'one-function-to-rule-them-all :reload)
(my-map vector [1 2 3] [1 2 3] [1 2 3]) ;=> ((1 1 1) (2 2 2) (3 3 3))
(my-map vector [1 2 3 4] [2 3 4 5] [3 4 5 6])
(map vector [1 2] [2 3] [3 4] [4 5])
(my-map vector [1 2] [2 3] [3 4] [4 5])
(use 'one-function-to-rule-them-all :reload)
(my-map + [1 1 1] [1 1 1] [1 1 1])
(my-map + [1 1 1] [1 1 1] [1 1 1] [2 2 2])
(use 'one-function-to-rule-them-all :reload)
(my-map vector [1 2] [2 3] [3 4] [4 5])
(use 'one-function-to-rule-them-all :reload)
(my-map vector [1 2] [2 3] [3 4] [4 5])
(my-map + [1 1 1] [1 1 1] [1 1 1] [2 2])
(use 'one-function-to-rule-them-all :reload)
(my-map + [1 1 1] [1 1 1] [1 1 1] [2 2])
(my-map vector [1 2] [2 3] [3 4] [4 5])
(concat (list [1 2 3] [2 3 4]) [[3 4 5] [4 5 6]])
(my-map vector [1 2] [2 3] [3 4])
(my-map vector [1 2] [2 3])
(use 'one-function-to-rule-them-all :reload)
(my-map vector [1 2] [2 3])
(my-map + [1 1 1] [1 1 1] [1 1 1] [2 2])
(use 'one-function-to-rule-them-all :reload)
(my-map + [1 1 1] [1 1 1] [1 1 1] [2 2])
(use 'one-function-to-rule-them-all :reload)
(my-map + [1 1 1] [1 1 1] [1 1 1] [2 2])
(my-map vector [1 2] [2 3])
(my-map vector [1 2] [2 3] [3 4])
(use 'one-function-to-rule-them-all :reload)
(my-map vector [1 2] [2 3] [3 4])
(my-map vector [1 2] [2 3])
(use 'one-function-to-rule-them-all :reload)
(my-map vector [1 2] [2 3])
(use 'one-function-to-rule-them-all :reload)
(my-map vector [1 2] [2 3])
(my-map vector [1 2] [2 3] [3 4])
(apply rest [[1 2] [2 3] [3 4]])
(my-map vector [1 2] [3 4])
(use 'one-function-to-rule-them-all :reload)
(my-map vector [1 2] [3 4] [5 6])
(use 'one-function-to-rule-them-all :reload)
(my-map vector [1 2] [3 4] [5 6])
(map first [[1 2 3] [2 3 4] [3 4 5]])
(use 'one-function-to-rule-them-all :reload)
(my-map vector [1 2] [3 4] [5 6])
(use 'one-function-to-rule-them-all :reload)
(my-map vector [1 2] [3 4] [5 6])
(use 'one-function-to-rule-them-all :reload)
(my-map vector [1 2] [3 4] [5 6])
(use 'one-function-to-rule-them-all :reload)
(firsts-and-rests [[1 2 3] [2 3 4] [3 4 5]])
(use 'one-function-to-rule-them-all :reload)
(firsts-and-rests [[1 2 3] [2 3 4] [3 4 5]])
(firsts-and-rests [[1 1 1] [2 2 2] [3 3 3]])
(use 'one-function-to-rule-them-all :reload)
(firsts-and-rests [[1 1 1] [2 2 2] [3 3 3]])
(firsts-and-rests [[2 2 2] [3 3 3]])
(use 'one-function-to-rule-them-all :reload)
(firsts-and-rests [[1 1 1] [2 2 2] [3 3 3]])
(use 'one-function-to-rule-them-all :reload)
(firsts-and-rests [[1 1 1] [2 2 2] [3 3 3]])
(firsts-and-rests [1 1 1] [2 2 2] [3 3 3])
(use 'one-function-to-rule-them-all :reload)
(firsts-and-rests [1 1 1] [2 2 2] [3 3 3])
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])  
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])  
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])  
(firsts-and-rests [1 2 3 4])
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])  
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])  
(use 'one-function-to-rule-them-all :reload)
(firsts-and-rests [1 2 3 4])
(apply inc '(1))
(firsts-and-rests [4])
(firsts-and-rests [])
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])  
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])  
(use 'clojure.stacktrace)
(print-stack-trace *e)
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])  
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])  
(firsts-and-rests [1 2 3 4])
(use 'one-function-to-rule-them-all :reload)
(firsts-and-rests [1 2 3 4])
(my-map inc [1 2 3 4])  
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])  
(firsts-and-rests [1 2 3 4])
(use 'one-function-to-rule-them-all :reload)
(firsts-and-rests [1 2 3 4])
(firsts-and-rests [[1 2 3 4]])
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])  
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])  
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])  
(use 'one-function-to-rule-them-all :reload)
(my-map inc [1 2 3 4])  
(my-map + [1 1 1] [1 1 1] [1 1 1])
(my-map vector [1 2 3] [1 2 3] [1 2 3])
