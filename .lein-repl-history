(conj "Hei " "vaan")
(concat "Moi" " vaan")
(str (concat "Moi" " vaan"))
(str "Moi")
(concat (str "Moi") (str " vaan"))
(str (concat (str "Moi") (str " vaan")))
(conj "Hei" "k")
(str "Moi" " vaan")
exit
(str ("Joo" "ei") " ")
(apply str ("Joo" "ei") " ")
(apply str ("Joo" "Ei"))
(apply str " " oho")
)
(apply str ["oho" "joo"])
(apply concat " " ["oho" "joo"])
(apply str " " ["oho" "joo"])
(apply str " " [["oho" "joo]"])
(apply str " " [["oho" "joo"]])
(apply str " " (["oho" "joo"]))
(apply str " " ("oho" "joo"))
(apply str " " ["oho" "joo"])
(map str " " ["oho" "joo"])
(map str " " [["oho" "joo"]])
(map str " " ["oho" "joo"])
(apply str " " ["oho" "joo"])
(map ["oho" "joo"])
(map count ["oho" "joo"])
(map str ["oho" "joo"])
(str "Jooo" " ")
exit
(use 'one-function-to-rule-them-all)
(str2 "ohoo")
(str-cat ["I" "am" "Legend"])
(apply str ["I" "am" "Legend"] " ")
(str (apply str ["I" "am" "Legend"] " "))
(map str (apply str ["I" "am" "Legend"] " "))
(str (map str (apply str ["I" "am" "Legend"] " ")))
(concat (map str (apply str ["I" "am" "Legend"] " ")))
exit
(str-cat ["I" "am" "Legend"])
(use 'one-function-to-rule-them-all)
(str-cat ["I" "am" "Legend"])
(repeat 5 "*")
(repeat 5 " ")
exit
(repeat (count ["I" "am" "Legend"]) " ")
(str (repeat (count ["I" "am" "Legend"]) " ") ["I" "am" "Legend"])
(reduce str (repeat (count ["I" "am" "Legend"]) " ") ["I" "am" "Legend"])
(reduce str ["I" "am" "Legend"])
(str ["I" "am" "Legend"] " ")
(str (str ["I" "am" "Legend"] " "))
(str ["I" "am" "Legend"] " ")
(apply str ["I" "am" "Legend"])
(apply str ["I" "am" "Legend"] " ")
(apply str ["I" "am" "Legend"] [" "])
(apply str ["I" "am" "Legend"])
(defn str2 [mjono]
  (str mjono " ")
)
(str2 " jaa")
(apply str2 ["I" "am" "Legend"])
(map str2 ["I" "am" "Legend"])
q
quit
(use 'one-function-to-rule-them-all)
(map str2 ["I" "am" "Legend"])
(concat-elements (map str2 ["I" "am" "Legend"]))
(str (map str2 ["I" "am" "Legend"]))
(map str2 ["I" "am" "Legend"])
(seq (map str2 ["I" "am" "Legend"]))
(map str2 ["I" "am" "Legend"])
(reduce str (map str2 ["I" "am" "Legend"]))
exit
(reverse "abcd")
(rest (reverse "abcd"))
(reverse (rest (reverse "abcd")))
(str (reverse (rest (reverse "abcd"))))
(seq (reverse (rest (reverse "abcd"))))
(use 'one-function-to-rule-them-all)
(reduce str (map str2 ["I" "am" "Legend"]))
(reduce str (map str2 (reverse ["I" "am" "Legend"])))
(reduce str (map str2 (rest (reverse ["I" "am" "Legend"]))))
(reduce str (map str2 (reverse (rest (reverse ["I" "am" "Legend"])))))
(last ["I" "am" "Legend"])
(str (reduce str (map str2 (reverse (rest (reverse ["I" "am" "Legend"]))))) (last ["I" "am" "Legend"]))
exit
(conj 1 [0 1 2])
(conj [0 1 2] 3)
(conj [0 1 2] 3 4)
(conj [0 1 2] [3 4])
(conj [0 1 2] 3 4)
(first [0 1 2])
[(first [0 1 2])]
[first [0 1 2]]
(conj [0 1 2] 3 4)
(conj [0 1 2] "x")
(conj (reverse [0 1 2]) "x")
quit
(use 'one-function-to-rule-them-all)
(my-interpose 0 [1 2 3])
(reverse (conj (reverse [1 2 3]) "x"))
(conj [1 2 3] "x")
(conj (reverse [1 2 3]) "x")
(conj (vec (reverse [1 2 3])) "x")
(reverse (conj (vec (reverse [1 2 3])) "x"))
(vec (reverse (conj (vec (reverse [1 2 3])) "x")))
exit
quit
[1 0 2 3]
(rest (reverse [1 0 2 3]))
(use 'one-function-to-rule-them-all)
(new-first 0 (rest (reverse [1 0 2 3])))
(new-first 0 (reverse [1 0 2 3]))
(reverse (new-first 0 (reverse [1 0 2 3])))
(conj (reverse (new-first 0 (reverse [1 0 2 3]))) (last [1 0 2 3]))
(conj (reverse (new-first 0 (reverse [1 0 2 3]))) "x")))
(conj (reverse (new-first 0 (reverse [1 0 2 3]))) "x"))
(conj (reverse (new-first 0 (reverse [1 0 2 3]))) (last [1 0 2 3]))
(conj (vec (reverse (new-first 0 (reverse [1 0 2 3])))) (last [1 0 2 3]))
exit
(use 'one-function-to-rule-them-all)
(my-count [])
(my-count [1])
(defn count-elem [elem a-seq]
  (let [counter (fn [count e]
                  (if (= e elem)
                    (inc count)
                    count))]
    (reduce counter 0 a-seq)))
(count-elem "x" [1 "x" 3 "x" "joo" 4 ])
exit
(use 'one-function-to-rule-them-all)
(my-count [1])
(my-count [1 2])
(my-count [])
exit
(reduce count [1 2 3 5])
(count [1 2 3 5])
(reduce count [[1 2 3 5]])
exit
(use 'one-function-to-rule-them-all)
exit
(use 'one-function-to-rule-them-all)
(checker 0 5)
(checker 0 [5])
(checker 0 [5 3 3])
(checker 0 [])
(reduce checker 0 [1 2 3])
(reduce checker 0 [1 2])
(reduce checker 0 [1])
(reduce checker 0 [])
exit
(use 'one-function-to-rule-them-all)
(my-count [])
(my-count [1])
(my-count [1 2 3 4])
exit
(use 'one-function-to-rule-them-all)
(my-count [1 2 3 4])
(my-count [1 2 3 4 "x" "huh" :D 55])
(reduce rest [] [1 2 3 4])
(reduce rest [] [[1 2 3 ]4])
(reduce rest [] [[1 2 3 4])
(reduce rest [] [[1 2 3 4]])
(reduce rest [1 2 3 4])
exit
(use 'one-function-to-rule-them-all)
(last-element [1 2 3])
(my-reverse [1 4 4 6])
(reduce last-element [] [1 4 4 6])
(reduce last-element [1 4 4 6])
(reduce conj [1 2 4])
(reduce conj [] [1 2 4])
(reduce conj (last-element [1 2 4]) [1 2 4])
(reduce conj [(last-element [1 2 4]]) [1 2 4])
(reduce conj [(last-element [1 2 4])] [1 2 4])
(seq 5)
(seq [5])
(reduce conj (seq (last-element [1 2 4])) [1 2 4])
(reduce last-element [] [1 4 4 6])
(reduce conj [] [1 4 4 6])
(reduce conj [(last-element [1 4 4 6])] [1 4 4 6])
(get [1 3 5 7 9] 3)
(conj [(get [1 4 4 6] (my-count [1 4 4 6]))] [1 4 4 6])
(conj [(get [1 4 4 6] (dec (my-count [1 4 4 6])))] [1 4 4 6])
(my-count [1 4 4 6])
(dec (my-count [1 4 4 6]))
(get [1 4 4 6] (dec (my-count [1 4 4 6])))
(conj [(get [1 4 4 6] (dec (my-count [1 4 4 6])))] [4 5 5])
(conj [(get [1 4 4 6] (dec (my-count [1 4 4 6])))] 4)
(conj [(my-last [1 4 4 6])](get [1 4 4 6] (dec (my-count [1 4 4 6]))))
(conj [(my-last [1 4 4 6])] (get [1 4 4 6] (dec (my-count [1 4 4 6]))))
(conj [] (last-element [1 2 3 4])
)
(conj [] (last-element [1 2 3 4]))
(conj (conj [] (last-element [1 2 3 4])) (get [1 2 3 4] 3))
(conj (conj [] (last-element [1 2 3 4])) (get [1 2 3 4] 2))
(conj (conj [] (last-element [1 2 3 4])) (get [1 2 3 4] (dec (my-count [1 2 3 4]))))
(conj (conj [] (last-element [1 2 3 4])) (get [1 2 3 4] (dec dec (my-count [1 2 3 4])))))
(conj (conj [] (last-element [1 2 3 4])) (get [1 2 3 4] (dec dec (my-count [1 2 3 4]))))))
(conj (conj [] (last-element [1 2 3 4])) (get [1 2 3 4] (dec dec (my-count [1 2 3 4])))))))
(conj (conj [] (last-element [1 2 3 4])) (get [1 2 3 4] (dec dec (my-count [1 2 3 4]))))
(conj (conj [] (last-element [1 2 3 4])) (get [1 2 3 4] (dec (dec (my-count [1 2 3 4])))))
(conj [] [1 2 3 4])
(concat [] [1 2 3 4])
(reduce concat [] [1 2 3 4])
(reduce concat [] [[1 2 3 4]])
(reduce conj [] [1 3 4 5])
(use 'one-function-to-rule-them-all)
(map last-elememt [[1 2 3 4] [1 2 3]])
(map last-element [[1 2 3 4] [1 2 3]])
exit
(apply inc [1 2 3 4])
(inc [1 2 3 4])
exit
