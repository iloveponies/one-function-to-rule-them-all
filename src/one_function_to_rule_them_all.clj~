(ns one-function-to-rule-them-all)

(defn concat-elements [a-seq]
  (reduce concat [] a-seq))

(defn str-cat [a-seq]
  (let [append (fn [s1 s2] (str s1 " " s2))]
  (if (empty? a-seq) ""
  (reduce append a-seq))))

(defn my-interpose [x a-seq]
 (let [vec (fn [v z] (if (odd? (count v)) (conj v x z) (conj v z)))]
 (reduce vec [] a-seq)))

(defn my-count [a-seq]
  (let [one-more (fn [x y] (+ x 1))]
  (if (empty? a-seq) 0 (reduce one-more 0 a-seq))))

(defn my-reverse [a-seq]
 (let [prepend (fn [my-seq elem] (conj my-seq elem))]
 (if (empty? a-seq) '()
	(reduce prepend '() a-seq))))

(defn min-max-element [a-seq]
  (let [minmax (fn [[x y] n] (cond (nil? x) [n n] (< n x) [n y] (> n y) [x n] :else [x y]))]
  (reduce minmax [] a-seq)))

(defn insert [sorted-seq n]
  (loop [my-seq sorted-seq result-vec []] 
  (cond (empty? my-seq) (conj result-vec n) 
	(> (first my-seq) n) (concat (conj result-vec n) my-seq)
	:else (recur (rest my-seq) (conj result-vec (first my-seq))))))

(defn insertion-sort [a-seq]
  (reduce insert [] a-seq))

(defn parity [a-seq]
  (let [toggle (fn [my-set elem] (if (contains? my-set elem) (disj my-set elem) (conj my-set elem)))]
   (if (empty? a-seq) #{} 
   (reduce toggle #{} a-seq))))

(defn minus ([x] (- x))
	    ([x y] (- x y)))

(defn count-params [ & varargs]
  (count varargs))

(defn my-* ([] 1)
           ([x] x)
	   ([x y] (* x y))
	   ([x y & more]
		(reduce * (* x y) more)))

(defn pred-and ([] (fn [x] true))
		([pred] pred)
		([pred1 pred2] (fn [x] (and (pred1 x) (pred2 x))))
		([pred1 pred2 & more] (fn [x] ((reduce pred-and (pred-and pred1 pred2) more) x))))

(defn my-map ([f a-seq]
  (let [conv (fn [my-vec x] (conj my-vec (f x)))]
  (reduce conv [] a-seq)))
([f a-seq b-seq & more]
  (let [n (+ (count more) 2)
        partitioned (partition n (apply interleave b-seq a-seq more))
        apply-f (fn [my-vec seq] (conj my-vec (apply f seq)))]
      (reduce apply-f [] partitioned))))

